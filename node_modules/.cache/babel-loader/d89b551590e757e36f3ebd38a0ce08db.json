{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoCoinInfo = exports.Network = exports.Type = void 0;\n\nconst lib_1 = require(\"./lib\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[\"type\"] = \"1\";\n  Keys[\"network\"] = \"2\";\n})(Keys || (Keys = {}));\n\nvar Type;\n\n(function (Type) {\n  Type[Type[\"bitcoin\"] = 0] = \"bitcoin\";\n})(Type = exports.Type || (exports.Type = {}));\n\nvar Network;\n\n(function (Network) {\n  Network[Network[\"mainnet\"] = 0] = \"mainnet\";\n  Network[Network[\"testnet\"] = 1] = \"testnet\";\n})(Network = exports.Network || (exports.Network = {}));\n\nclass CryptoCoinInfo extends RegistryItem_1.RegistryItem {\n  constructor(type, network) {\n    super();\n    this.type = type;\n    this.network = network;\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO;\n    };\n\n    this.getType = () => {\n      return this.type || Type.bitcoin;\n    };\n\n    this.getNetwork = () => {\n      return this.network || Network.mainnet;\n    };\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.type) {\n        map[Keys.type] = this.type;\n      }\n\n      if (this.network) {\n        map[Keys.network] = this.network;\n      }\n\n      return new lib_1.DataItem(map);\n    };\n  }\n\n}\n\nexports.CryptoCoinInfo = CryptoCoinInfo;\n\nCryptoCoinInfo.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const type = map[Keys.type];\n  const network = map[Keys.network];\n  return new CryptoCoinInfo(type, network);\n};\n\nCryptoCoinInfo.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoCoinInfo.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;EACPA;EACAA;AACD,CAHD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AAKA,IAAYC,IAAZ;;AAAA,WAAYA,IAAZ,EAAgB;EACdA;AACD,CAFD,EAAYA,IAAI,GAAJC,gCAAI,EAAJ,CAAZ;;AAIA,IAAYC,OAAZ;;AAAA,WAAYA,OAAZ,EAAmB;EACjBA;EACAA;AACD,CAHD,EAAYA,OAAO,GAAPD,sCAAO,EAAP,CAAZ;;AAKA,MAAaE,cAAb,SAAoCC,2BAApC,CAAgD;EAK9CC,YAAoBC,IAApB,EAAyCC,OAAzC,EAA0D;IACxD;IADkB;IAAqB;;IAJzC,uBAAkB,MAAK;MACrB,OAAOC,6BAAcC,gBAArB;IACD,CAFD;;IAQO,eAAU,MAAK;MACpB,OAAO,KAAKH,IAAL,IAAaN,IAAI,CAACU,OAAzB;IACD,CAFM;;IAIA,kBAAa,MAAK;MACvB,OAAO,KAAKH,OAAL,IAAgBL,OAAO,CAACS,OAA/B;IACD,CAFM;;IAIA,kBAAa,MAAK;MACvB,MAAMC,GAAG,GAAgB,EAAzB;;MACA,IAAI,KAAKN,IAAT,EAAe;QACbM,GAAG,CAACb,IAAI,CAACO,IAAN,CAAH,GAAiB,KAAKA,IAAtB;MACD;;MACD,IAAI,KAAKC,OAAT,EAAkB;QAChBK,GAAG,CAACb,IAAI,CAACQ,OAAN,CAAH,GAAoB,KAAKA,OAAzB;MACD;;MACD,OAAO,IAAIM,cAAJ,CAAaD,GAAb,CAAP;IACD,CATM;EAVN;;AAP6C;;AAAhDX;;AA4BgBE,8BAAgBW,QAAD,IAAuB;EAClD,MAAMF,GAAG,GAAGE,QAAQ,CAACC,OAAT,EAAZ;EACA,MAAMT,IAAI,GAAGM,GAAG,CAACb,IAAI,CAACO,IAAN,CAAhB;EACA,MAAMC,OAAO,GAAGK,GAAG,CAACb,IAAI,CAACQ,OAAN,CAAnB;EACA,OAAO,IAAIJ,cAAJ,CAAmBG,IAAnB,EAAyBC,OAAzB,CAAP;AACD,CALa;;AAOAJ,0BAAYa,YAAD,IAAyB;EAChD,MAAMF,QAAQ,GAAG,4BAAiBE,YAAjB,CAAjB;EACA,OAAOb,cAAc,CAACc,YAAf,CAA4BH,QAA5B,CAAP;AACD,CAHa","names":["Keys","Type","exports","Network","CryptoCoinInfo","RegistryItem_1","constructor","type","network","RegistryType_1","CRYPTO_COIN_INFO","bitcoin","mainnet","map","lib_1","dataItem","getData","_cborPayload","fromDataItem"],"sourceRoot":"","sources":["../src/CryptoCoinInfo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}