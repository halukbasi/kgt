{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fountainEncoder_1 = __importDefault(require(\"./fountainEncoder\"));\n\nconst bytewords_1 = __importDefault(require(\"./bytewords\"));\n\nclass UREncoder {\n  constructor(_ur, maxFragmentLength, firstSeqNum, minFragmentLength) {\n    this.ur = _ur;\n    this.fountainEncoder = new fountainEncoder_1.default(_ur.cbor, maxFragmentLength, firstSeqNum, minFragmentLength);\n  }\n\n  get fragmentsLength() {\n    return this.fountainEncoder.fragmentsLength;\n  }\n\n  get fragments() {\n    return this.fountainEncoder.fragments;\n  }\n\n  get messageLength() {\n    return this.fountainEncoder.messageLength;\n  }\n\n  get cbor() {\n    return this.ur.cbor;\n  }\n\n  encodeWhole() {\n    return [...new Array(this.fragmentsLength)].map(() => this.nextPart());\n  }\n\n  nextPart() {\n    const part = this.fountainEncoder.nextPart();\n\n    if (this.fountainEncoder.isSinglePart()) {\n      return UREncoder.encodeSinglePart(this.ur);\n    } else {\n      return UREncoder.encodePart(this.ur.type, part);\n    }\n  }\n\n  static encodeUri(scheme, pathComponents) {\n    const path = pathComponents.join('/');\n    return [scheme, path].join(':');\n  }\n\n  static encodeUR(pathComponents) {\n    return UREncoder.encodeUri('ur', pathComponents);\n  }\n\n  static encodePart(type, part) {\n    const seq = `${part.seqNum}-${part.seqLength}`;\n    const body = bytewords_1.default.encode(part.cbor().toString('hex'), bytewords_1.default.STYLES.MINIMAL);\n    return UREncoder.encodeUR([type, seq, body]);\n  }\n\n  static encodeSinglePart(ur) {\n    const body = bytewords_1.default.encode(ur.cbor.toString('hex'), bytewords_1.default.STYLES.MINIMAL);\n    return UREncoder.encodeUR([ur.type, body]);\n  }\n\n}\n\nexports.default = UREncoder;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAGA,MAAqBA,SAArB,CAA8B;EAI5BC,YACEC,GADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,iBAJF,EAI4B;IAE1B,KAAKC,EAAL,GAAUJ,GAAV;IACA,KAAKK,eAAL,GAAuB,IAAIC,yBAAJ,CAAoBN,GAAG,CAACO,IAAxB,EAA8BN,iBAA9B,EAAiDC,WAAjD,EAA8DC,iBAA9D,CAAvB;EACD;;EAEyB,IAAfK,eAAe;IAAK,OAAO,KAAKH,eAAL,CAAqBG,eAA5B;EAA8C;;EACzD,IAATC,SAAS;IAAK,OAAO,KAAKJ,eAAL,CAAqBI,SAA5B;EAAwC;;EACzC,IAAbC,aAAa;IAAK,OAAO,KAAKL,eAAL,CAAqBK,aAA5B;EAA4C;;EAC1D,IAAJH,IAAI;IAAK,OAAO,KAAKH,EAAL,CAAQG,IAAf;EAAsB;;EAEnCI,WAAW;IAChB,OAAO,CAAC,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,eAAf,CAAJ,EAAqCK,GAArC,CAAyC,MAAM,KAAKC,QAAL,EAA/C,CAAP;EACD;;EAEMA,QAAQ;IACb,MAAMC,IAAI,GAAG,KAAKV,eAAL,CAAqBS,QAArB,EAAb;;IAEA,IAAI,KAAKT,eAAL,CAAqBW,YAArB,EAAJ,EAAyC;MACvC,OAAOlB,SAAS,CAACmB,gBAAV,CAA2B,KAAKb,EAAhC,CAAP;IACD,CAFD,MAGK;MACH,OAAON,SAAS,CAACoB,UAAV,CAAqB,KAAKd,EAAL,CAAQe,IAA7B,EAAmCJ,IAAnC,CAAP;IACD;EACF;;EAEuB,OAATK,SAAS,CAACC,MAAD,EAAiBC,cAAjB,EAAyC;IAC/D,MAAMC,IAAI,GAAGD,cAAc,CAACE,IAAf,CAAoB,GAApB,CAAb;IACA,OAAO,CAACH,MAAD,EAASE,IAAT,EAAeC,IAAf,CAAoB,GAApB,CAAP;EACD;;EAEsB,OAARC,QAAQ,CAACH,cAAD,EAAyB;IAC9C,OAAOxB,SAAS,CAACsB,SAAV,CAAoB,IAApB,EAA0BE,cAA1B,CAAP;EACD;;EAEwB,OAAVJ,UAAU,CAACC,IAAD,EAAeJ,IAAf,EAAwC;IAC/D,MAAMW,GAAG,GAAG,GAAGX,IAAI,CAACY,MAAM,IAAIZ,IAAI,CAACa,SAAS,EAA5C;IACA,MAAMC,IAAI,GAAGC,oBAAUC,MAAV,CAAiBhB,IAAI,CAACR,IAAL,GAAYyB,QAAZ,CAAqB,KAArB,CAAjB,EAA8CF,oBAAUG,MAAV,CAAiBC,OAA/D,CAAb;IAEA,OAAOpC,SAAS,CAAC2B,QAAV,CAAmB,CAACN,IAAD,EAAOO,GAAP,EAAYG,IAAZ,CAAnB,CAAP;EACD;;EAE6B,OAAhBZ,gBAAgB,CAACb,EAAD,EAAO;IACnC,MAAMyB,IAAI,GAAGC,oBAAUC,MAAV,CAAiB3B,EAAE,CAACG,IAAH,CAAQyB,QAAR,CAAiB,KAAjB,CAAjB,EAA0CF,oBAAUG,MAAV,CAAiBC,OAA3D,CAAb;IAEA,OAAOpC,SAAS,CAAC2B,QAAV,CAAmB,CAACrB,EAAE,CAACe,IAAJ,EAAUU,IAAV,CAAnB,CAAP;EACD;;AAtD2B;;AAA9BM","names":["UREncoder","constructor","_ur","maxFragmentLength","firstSeqNum","minFragmentLength","ur","fountainEncoder","fountainEncoder_1","cbor","fragmentsLength","fragments","messageLength","encodeWhole","Array","map","nextPart","part","isSinglePart","encodeSinglePart","encodePart","type","encodeUri","scheme","pathComponents","path","join","encodeUR","seq","seqNum","seqLength","body","bytewords_1","encode","toString","STYLES","MINIMAL","exports"],"sourceRoot":"","sources":["../src/urEncoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}