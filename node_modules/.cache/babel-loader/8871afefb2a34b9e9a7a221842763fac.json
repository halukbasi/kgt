{"ast":null,"code":"import { Message, PublicKey, SIGNATURE_LENGTH_IN_BYTES, Transaction } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst DEFAULT_SIGNATURE_BUFFER = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\nexport class StrikeWallet {\n  constructor() {\n    this.url = 'https://wallet.strikeprotocols.com';\n\n    this.cleanUp = () => {\n      [...this._timers].forEach(t => this.clearTimer(t));\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.close();\n      }\n\n      this._wallet = null;\n    };\n\n    this.clearTimer = timer => {\n      this._timers = this._timers.filter(t => t != timer);\n      window.clearInterval(timer);\n    };\n\n    this.instructionsToSerializableInstructions = instructions => instructions.map(i => {\n      return {\n        'programId': i.programId.toBase58(),\n        'accountMetas': i.keys.map(k => {\n          return {\n            address: k.pubkey.toBase58(),\n            signer: k.isSigner,\n            writable: k.isWritable\n          };\n        }),\n        'data': window.btoa(String.fromCharCode(...i.data))\n      };\n    });\n\n    this.handleWalletMessage = data => {\n      var _a, _b, _c;\n\n      if (data.type == \"connected\") {\n        this._connecting = false;\n\n        if (!data.error) {\n          this.isLoggedIn = true;\n\n          if ((_a = data.connected) === null || _a === void 0 ? void 0 : _a.publicKey) {\n            this._publicKey = new PublicKey(data.connected.publicKey);\n          }\n        }\n      } else if ([\"sendTransaction\", \"sendFinalTransaction\"].includes(data.type)) {\n        const transactionIdentifier = (_b = data.sendTransaction) === null || _b === void 0 ? void 0 : _b.identifier;\n\n        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n          if (data.error) {\n            this._pendingTransactionErrors[transactionIdentifier] = {\n              message: data.error\n            };\n          } else {\n            this._pendingTransactions[transactionIdentifier] = data.sendTransaction || null;\n          }\n        }\n      } else if (data.type == \"signTransaction\") {\n        const transactionIdentifier = (_c = data.signTransaction) === null || _c === void 0 ? void 0 : _c.identifier;\n\n        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n          if (data.error) {\n            this._pendingTransactionErrors[transactionIdentifier] = {\n              message: data.error\n            };\n          } else {\n            this._pendingTransactions[transactionIdentifier] = data.signTransaction || null;\n          }\n        }\n      }\n    };\n\n    this.isLoggedIn = false;\n    this._pendingTransactions = {};\n    this._pendingTransactionErrors = {};\n    this._timers = [];\n    this._wallet = null;\n    this._connecting = false;\n    this._publicKey = null;\n    window.addEventListener(\"message\", e => {\n      this.handleWalletMessage(e.data);\n    });\n  }\n\n  async connect(url) {\n    try {\n      this.url = url || this.url;\n      const origin = encodeURIComponent(window.location.origin);\n      const connectUrl = `${this.url}/connect?origin=${origin}`;\n      this._connecting = true;\n      this._wallet = window.open(connectUrl, `strike-wallet-${origin}`, \"height=800,width=800,menubar=no,status=no,toolbar=no\");\n\n      if (!this._wallet) {\n        this._connecting = false;\n        throw new Error(\"Unable to connect to wallet\");\n      }\n\n      this._timers.push(window.setInterval(() => {\n        if (this._wallet.closed) {\n          this.cleanUp();\n        } else if (this._wallet) {\n          this._wallet.postMessage({\n            type: 'heartbeat'\n          }, this.url);\n        }\n      }, 100));\n\n      return new Promise((resolve, reject) => {\n        const timer = window.setInterval(() => {\n          if (this.isLoggedIn && this._publicKey) {\n            this.clearTimer(timer);\n            resolve(this._publicKey);\n          } else if (!this.isLoggedIn && !this._connecting) {\n            this.clearTimer(timer);\n            reject(new Error(\"Unable to connect to Strike\"));\n          }\n        }, 100);\n\n        this._timers.push(timer);\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async signTransaction(transaction) {\n    this.verifyCanSignRequests([transaction]);\n\n    try {\n      return this.signOneTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async signAllTransactions(transactions) {\n    this.verifyCanSignRequests(transactions);\n\n    try {\n      return Promise.all(transactions.map(transaction => {\n        return this.signOneTransaction(transaction);\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async sendTransaction(transaction, connection, options) {\n    try {\n      const wallet = this._wallet;\n      if (!wallet) throw new Error(\"Not Connected\");\n      const transactionIdentifier = uuidv4();\n      this._pendingTransactions[transactionIdentifier] = null;\n      const signers = options ? options.signers : undefined;\n\n      if (signers && signers.length > 0) {\n        return new Promise((resolve, reject) => {\n          this.signOneTransaction(transaction, transactionIdentifier).then(walletTransaction => {\n            this._pendingTransactions[transactionIdentifier] = null;\n            (signers === null || signers === void 0 ? void 0 : signers.length) && walletTransaction.partialSign(...signers);\n            wallet.postMessage({\n              type: \"sendFinalTransaction\",\n              sendFinalTransaction: {\n                transactionIdentifier,\n                signaturePubkeyPairs: walletTransaction.signatures.filter(sp => sp.signature != null).map(sp => {\n                  return {\n                    'pubkey': sp.publicKey.toBase58(),\n                    'signature': sp.signature.toString('base64')\n                  };\n                })\n              }\n            }, this.url);\n            const timer = window.setInterval(() => {\n              const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n              const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n\n              if (pendingTransaction != null || pendingTransactionError != null) {\n                this.clearTimer(timer);\n                pendingTransaction && resolve(pendingTransaction.signature);\n                pendingTransactionError && reject(pendingTransactionError);\n              }\n            }, 100);\n\n            this._timers.push(timer);\n          }).catch(error => {\n            reject(error);\n            throw error;\n          });\n        });\n      } else {\n        const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n        return new Promise((resolve, reject) => {\n          wallet.postMessage({\n            type: \"sendTransaction\",\n            sendTransaction: {\n              instructions,\n              transactionIdentifier\n            }\n          }, this.url);\n          const timer = window.setInterval(() => {\n            const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n            const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n\n            if (pendingTransaction != null || pendingTransactionError != null) {\n              this.clearTimer(timer);\n              pendingTransaction && resolve(pendingTransaction.signature);\n              pendingTransactionError && reject(pendingTransactionError);\n            }\n          }, 100);\n\n          this._timers.push(timer);\n        });\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  buildTransaction(pendingTransaction) {\n    let message = Message.from(Buffer.from(Uint8Array.from(window.atob(pendingTransaction.message), c => c.charCodeAt(0))));\n    return Transaction.populate(message, Array.from({\n      length: message.header.numRequiredSignatures\n    }, (_v, i) => {\n      let sigPubkeyPair = pendingTransaction.signatures.find(s => s.pubkey == message.accountKeys[i].toBase58());\n      return bs58.encode(sigPubkeyPair ? Buffer.from(Uint8Array.from(window.atob(sigPubkeyPair.signature), c => c.charCodeAt(0))) : DEFAULT_SIGNATURE_BUFFER);\n    }));\n  }\n\n  verifyCanSignRequests(transactions) {\n    transactions.forEach(transaction => {\n      if (transaction.signatures.some(s => s.signature != null)) {\n        throw new Error(\"Strike does not support this signing mode\");\n      }\n    });\n  }\n\n  signOneTransaction(transaction) {\n    let transactionIdentifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : uuidv4();\n    const wallet = this._wallet;\n    if (!wallet) throw new Error(\"Not Connected\");\n    const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n    this._pendingTransactions[transactionIdentifier] = null;\n    return new Promise((resolve, reject) => {\n      wallet.postMessage({\n        type: \"signTransaction\",\n        signTransaction: {\n          instructions,\n          transactionIdentifier\n        }\n      }, this.url);\n      const timer = window.setInterval(() => {\n        const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n        const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n\n        if (pendingTransaction != null || pendingTransactionError != null) {\n          this.clearTimer(timer);\n          pendingTransaction && resolve(this.buildTransaction(pendingTransaction));\n          pendingTransactionError && reject(pendingTransactionError);\n        }\n      }, 100);\n\n      this._timers.push(timer);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Message","PublicKey","SIGNATURE_LENGTH_IN_BYTES","Transaction","bs58","v4","uuidv4","DEFAULT_SIGNATURE_BUFFER","Buffer","alloc","fill","StrikeWallet","constructor","_timers","forEach","t","clearTimer","wallet","_wallet","close","timer","filter","window","clearInterval","instructions","map","i","programId","toBase58","keys","k","address","pubkey","signer","isSigner","writable","isWritable","btoa","String","fromCharCode","data","type","_connecting","error","isLoggedIn","connected","_a","publicKey","_publicKey","includes","transactionIdentifier","sendTransaction","_b","identifier","_pendingTransactions","_pendingTransactionErrors","message","signTransaction","_c","addEventListener","e","handleWalletMessage","connect","url","origin","encodeURIComponent","location","connectUrl","open","Error","push","setInterval","closed","cleanUp","postMessage","Promise","resolve","reject","transaction","verifyCanSignRequests","signOneTransaction","signAllTransactions","transactions","all","connection","options","signers","undefined","length","then","walletTransaction","partialSign","sendFinalTransaction","signaturePubkeyPairs","signatures","sp","signature","toString","pendingTransaction","pendingTransactionError","catch","instructionsToSerializableInstructions","buildTransaction","from","Uint8Array","atob","c","charCodeAt","populate","Array","header","numRequiredSignatures","_v","sigPubkeyPair","find","s","accountKeys","encode","some"],"sourceRoot":"","sources":["../../src/strikewallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}