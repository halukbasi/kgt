{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferXOR = exports.setDifference = exports.arrayContains = exports.arraysEqual = exports.hasPrefix = exports.isURType = exports.intToBytes = exports.toUint32 = exports.getCRCHex = exports.getCRC = exports.split = exports.partition = exports.sha256Hash = void 0;\n\nconst sha_js_1 = __importDefault(require(\"sha.js\"));\n\nconst crc_1 = require(\"crc\");\n\nconst sha256Hash = data => sha_js_1.default('sha256').update(data).digest();\n\nexports.sha256Hash = sha256Hash;\n\nconst partition = (s, n) => s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\n\nexports.partition = partition;\n\nconst split = (s, length) => [s.slice(0, -length), s.slice(-length)];\n\nexports.split = split;\n\nconst getCRC = message => crc_1.crc32(message);\n\nexports.getCRC = getCRC;\n\nconst getCRCHex = message => crc_1.crc32(message).toString(16).padStart(8, '0');\n\nexports.getCRCHex = getCRCHex;\n\nconst toUint32 = number => number >>> 0;\n\nexports.toUint32 = toUint32;\n\nconst intToBytes = num => {\n  const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n\n  const view = new DataView(arr);\n  view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n\n  return Buffer.from(arr);\n};\n\nexports.intToBytes = intToBytes;\n\nconst isURType = type => {\n  return type.split('').every((_, index) => {\n    let c = type.charCodeAt(index);\n    if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0)) return true;\n    if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0)) return true;\n    if (c === '-'.charCodeAt(0)) return true;\n    return false;\n  });\n};\n\nexports.isURType = isURType;\n\nconst hasPrefix = (s, prefix) => s.indexOf(prefix) === 0;\n\nexports.hasPrefix = hasPrefix;\n\nconst arraysEqual = (ar1, ar2) => {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n\n  return ar1.every(el => ar2.includes(el));\n};\n\nexports.arraysEqual = arraysEqual;\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\n\nconst arrayContains = (ar1, ar2) => {\n  return ar2.every(v => ar1.includes(v));\n};\n\nexports.arrayContains = arrayContains;\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\n\nconst setDifference = (ar1, ar2) => {\n  return ar1.filter(x => ar2.indexOf(x) < 0);\n};\n\nexports.setDifference = setDifference;\n\nconst bufferXOR = (a, b) => {\n  const length = Math.max(a.length, b.length);\n  const buffer = Buffer.allocUnsafe(length);\n\n  for (let i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i];\n  }\n\n  return buffer;\n};\n\nexports.bufferXOR = bufferXOR;","map":{"version":3,"mappings":"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","names":["sha256Hash","data","sha_js_1","update","digest","exports","partition","s","n","match","RegExp","split","length","slice","getCRC","message","crc_1","getCRCHex","toString","padStart","toUint32","number","intToBytes","num","arr","ArrayBuffer","view","DataView","setUint32","Buffer","from","isURType","type","every","_","index","c","charCodeAt","hasPrefix","prefix","indexOf","arraysEqual","ar1","ar2","el","includes","arrayContains","v","setDifference","filter","x","bufferXOR","a","b","Math","max","buffer","allocUnsafe","i"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}