{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolanaWallet = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bs58_1 = __importDefault(require(\"bs58\"));\n\nconst buffer_1 = require(\"buffer\");\n\nclass SolanaWallet {\n  constructor(auth, rpcUrl) {\n    this.auth = auth;\n    this.rpcUrl = rpcUrl;\n    this.isParticleNetwork = true;\n    this.auth = auth;\n    this.rpcUrl = rpcUrl;\n    this._connecting = false;\n    const userInfo = this.auth.userInfo();\n\n    if (userInfo) {\n      const wallet = userInfo.wallets.find(w => w.chain_name === \"solana\" && w.public_address.length > 0);\n\n      if (wallet) {\n        this._publicKey = new web3_js_1.PublicKey(wallet.public_address);\n      } else {\n        this._publicKey = null;\n      }\n    } else {\n      this._publicKey = null;\n    }\n\n    this.auth.on(\"connect\", userInfo => {\n      const wallet = userInfo.wallets.find(w => w.chain_name === \"solana\" && w.public_address.length > 0);\n\n      if (wallet) {\n        this._publicKey = new web3_js_1.PublicKey(wallet.public_address);\n      }\n    });\n    this.auth.on(\"disconnect\", () => {\n      this._publicKey = null;\n    });\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  connect(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._connecting = true;\n        let wallet = this.auth.wallet();\n\n        if (wallet) {\n          this._publicKey = new web3_js_1.PublicKey(wallet.public_address);\n          return Promise.resolve();\n        }\n\n        yield this.auth.login(config);\n        wallet = this.auth.wallet();\n\n        if (wallet) {\n          this._publicKey = new web3_js_1.PublicKey(wallet.public_address);\n          return Promise.resolve();\n        } else {\n          return Promise.reject(\"wallet create failed\");\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.auth.logout();\n      this._publicKey = null;\n      return Promise.resolve();\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signature = yield this.auth.sign(\"signTransaction\", bs58_1.default.encode(transaction.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      })));\n      return web3_js_1.Transaction.from(buffer_1.Buffer.from(signature, \"base64\"));\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signatures = yield this.auth.signAllTransactions(transactions.map(tx => bs58_1.default.encode(tx.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      }))));\n      return signatures.map(signed => web3_js_1.Transaction.from(buffer_1.Buffer.from(signed, \"base64\")));\n    });\n  }\n\n  signAndSendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.auth.sendTransaction(bs58_1.default.encode(transaction.serialize({\n        requireAllSignatures: false,\n        verifySignatures: false\n      })));\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signature = yield this.auth.sign(\"signMessage\", bs58_1.default.encode(message));\n      return buffer_1.Buffer.from(signature, \"base64\");\n    });\n  }\n\n  getConnection(config) {\n    const url = this.rpcUrl ? this.rpcUrl + \"/solana/rpc\" : \"https://api.particle.network/solana-chain/rpc\";\n    return new web3_js_1.Connection(`${url}?chainId=${this.auth.chainId()}`, {\n      commitment: config === null || config === void 0 ? void 0 : config.commitment,\n      wsEndpoint: config === null || config === void 0 ? void 0 : config.wsEndpoint,\n      httpHeaders: {\n        Authorization: this.auth.basicCredentials()\n      },\n      fetch: config === null || config === void 0 ? void 0 : config.fetch,\n      fetchMiddleware: config === null || config === void 0 ? void 0 : config.fetchMiddleware,\n      disableRetryOnRateLimit: config === null || config === void 0 ? void 0 : config.disableRetryOnRateLimit,\n      confirmTransactionInitialTimeout: config === null || config === void 0 ? void 0 : config.confirmTransactionInitialTimeout\n    });\n  }\n\n}\n\nexports.SolanaWallet = SolanaWallet;","map":{"version":3,"mappings":"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","names":["SolanaWallet","constructor","auth","rpcUrl","_connecting","userInfo","wallet","wallets","find","w","chain_name","public_address","length","_publicKey","web3_js_1","on","connecting","connected","publicKey","connect","config","Promise","resolve","login","reject","e","disconnect","logout","signTransaction","transaction","signature","sign","bs58_1","encode","serialize","requireAllSignatures","verifySignatures","from","buffer_1","signAllTransactions","transactions","signatures","map","tx","signed","signAndSendTransaction","sendTransaction","signMessage","message","getConnection","url","chainId","commitment","wsEndpoint","httpHeaders","Authorization","basicCredentials","fetch","fetchMiddleware","disableRetryOnRateLimit","confirmTransactionInitialTimeout","exports"],"sourceRoot":"","sources":["../src/solana-wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}