{"ast":null,"code":"import { WalletNotConnectedError, WalletNotReadyError, WalletReadyState } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors.mjs';\nimport { useLocalStorage } from './useLocalStorage.mjs';\nimport { WalletContext } from './useWallet.mjs';\nconst initialState = {\n  wallet: null,\n  adapter: null,\n  publicKey: null,\n  connected: false\n};\nexport const WalletProvider = _ref => {\n  let {\n    children,\n    wallets: adapters,\n    autoConnect = false,\n    onError,\n    localStorageKey = 'walletName'\n  } = _ref;\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [{\n    wallet,\n    adapter,\n    publicKey,\n    connected\n  }, setState] = useState(initialState);\n  const readyState = (adapter === null || adapter === void 0 ? void 0 : adapter.readyState) || WalletReadyState.Unsupported;\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false);\n  const isConnecting = useRef(false);\n  const isDisconnecting = useRef(false);\n  const isUnloading = useRef(false); // Wrap adapters to conform to the `Wallet` interface\n\n  const [wallets, setWallets] = useState(() => adapters.map(adapter => ({\n    adapter,\n    readyState: adapter.readyState\n  }))); // When the wallets change, start to listen for changes to their `readyState`\n\n  useEffect(() => {\n    function handleReadyStateChange(readyState) {\n      setWallets(prevWallets => {\n        const walletIndex = prevWallets.findIndex(_ref2 => {\n          let {\n            adapter\n          } = _ref2;\n          return adapter.name === this.name;\n        });\n        if (walletIndex === -1) return prevWallets;\n        return [...prevWallets.slice(0, walletIndex), { ...prevWallets[walletIndex],\n          readyState\n        }, ...prevWallets.slice(walletIndex + 1)];\n      });\n    }\n\n    for (const adapter of adapters) {\n      adapter.on('readyStateChange', handleReadyStateChange, adapter);\n    }\n\n    return () => {\n      for (const adapter of adapters) {\n        adapter.off('readyStateChange', handleReadyStateChange, adapter);\n      }\n    };\n  }, [adapters]); // When the selected wallet changes, initialize the state\n\n  useEffect(() => {\n    const wallet = wallets.find(_ref3 => {\n      let {\n        adapter\n      } = _ref3;\n      return adapter.name === name;\n    });\n\n    if (wallet) {\n      setState({\n        wallet,\n        adapter: wallet.adapter,\n        connected: wallet.adapter.connected,\n        publicKey: wallet.adapter.publicKey\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, wallets]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !(readyState === WalletReadyState.Installed || readyState === WalletReadyState.Loadable)) return;\n\n    (async function () {\n      isConnecting.current = true;\n      setConnecting(true);\n\n      try {\n        await adapter.connect();\n      } catch (error) {\n        // Clear the selected wallet\n        setName(null); // Don't throw error, but handleError will still be called\n      } finally {\n        setConnecting(false);\n        isConnecting.current = false;\n      }\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, readyState]); // If the window is closing or reloading, ignore disconnect and error events from the adapter\n\n  useEffect(() => {\n    function listener() {\n      isUnloading.current = true;\n    }\n\n    window.addEventListener('beforeunload', listener);\n    return () => window.removeEventListener('beforeunload', listener);\n  }, [isUnloading]); // Handle the adapter's connect event\n\n  const handleConnect = useCallback(() => {\n    if (!adapter) return;\n    setState(state => ({ ...state,\n      connected: adapter.connected,\n      publicKey: adapter.publicKey\n    }));\n  }, [adapter]); // Handle the adapter's disconnect event\n\n  const handleDisconnect = useCallback(() => {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading]); // Handle the adapter's error event, and local errors\n\n  const handleError = useCallback(error => {\n    // Call onError unless the window is unloading\n    if (!isUnloading.current) (onError || console.error)(error);\n    return error;\n  }, [isUnloading, onError]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('connect', handleConnect);\n      adapter.on('disconnect', handleDisconnect);\n      adapter.on('error', handleError);\n      return () => {\n        adapter.off('connect', handleConnect);\n        adapter.off('disconnect', handleDisconnect);\n        adapter.off('error', handleError);\n      };\n    }\n  }, [adapter, handleConnect, handleDisconnect, handleError]); // When the adapter changes, disconnect the old one\n\n  useEffect(() => {\n    return () => {\n      adapter === null || adapter === void 0 ? void 0 : adapter.disconnect();\n    };\n  }, [adapter]); // Connect the adapter to the wallet\n\n  const connect = useCallback(async () => {\n    if (isConnecting.current || connecting || disconnecting || connected) return;\n    if (!adapter) throw handleError(new WalletNotSelectedError());\n\n    if (!(readyState === WalletReadyState.Installed || readyState === WalletReadyState.Loadable)) {\n      // Clear the selected wallet\n      setName(null);\n\n      if (typeof window !== 'undefined') {\n        window.open(adapter.url, '_blank');\n      }\n\n      throw handleError(new WalletNotReadyError());\n    }\n\n    isConnecting.current = true;\n    setConnecting(true);\n\n    try {\n      await adapter.connect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and handleError will also be called\n\n      throw error;\n    } finally {\n      setConnecting(false);\n      isConnecting.current = false;\n    }\n  }, [isConnecting, connecting, disconnecting, connected, adapter, readyState, handleError]); // Disconnect the adapter from the wallet\n\n  const disconnect = useCallback(async () => {\n    if (isDisconnecting.current || disconnecting) return;\n    if (!adapter) return setName(null);\n    isDisconnecting.current = true;\n    setDisconnecting(true);\n\n    try {\n      await adapter.disconnect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and handleError will also be called\n\n      throw error;\n    } finally {\n      setDisconnecting(false);\n      isDisconnecting.current = false;\n    }\n  }, [isDisconnecting, disconnecting, adapter]); // Send a transaction using the provided connection\n\n  const sendTransaction = useCallback(async (transaction, connection, options) => {\n    if (!adapter) throw handleError(new WalletNotSelectedError());\n    if (!connected) throw handleError(new WalletNotConnectedError());\n    return await adapter.sendTransaction(transaction, connection, options);\n  }, [adapter, handleError, connected]); // Sign a transaction if the wallet supports it\n\n  const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter ? async transaction => {\n    if (!connected) throw handleError(new WalletNotConnectedError());\n    return await adapter.signTransaction(transaction);\n  } : undefined, [adapter, handleError, connected]); // Sign multiple transactions if the wallet supports it\n\n  const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter ? async transactions => {\n    if (!connected) throw handleError(new WalletNotConnectedError());\n    return await adapter.signAllTransactions(transactions);\n  } : undefined, [adapter, handleError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  const signMessage = useMemo(() => adapter && 'signMessage' in adapter ? async message => {\n    if (!connected) throw handleError(new WalletNotConnectedError());\n    return await adapter.signMessage(message);\n  } : undefined, [adapter, handleError, connected]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      autoConnect,\n      wallets,\n      wallet,\n      publicKey,\n      connected,\n      connecting,\n      disconnecting,\n      select: setName,\n      connect,\n      disconnect,\n      sendTransaction,\n      signTransaction,\n      signAllTransactions,\n      signMessage\n    }\n  }, children);\n};","map":{"version":3,"mappings":"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","names":["WalletNotConnectedError","WalletNotReadyError","WalletReadyState","React","useCallback","useEffect","useMemo","useRef","useState","WalletNotSelectedError","useLocalStorage","WalletContext","initialState","wallet","adapter","publicKey","connected","WalletProvider","children","wallets","adapters","autoConnect","onError","localStorageKey","name","setName","setState","readyState","Unsupported","connecting","setConnecting","disconnecting","setDisconnecting","isConnecting","isDisconnecting","isUnloading","setWallets","map","handleReadyStateChange","prevWallets","walletIndex","findIndex","slice","on","off","find","current","Installed","Loadable","connect","error","listener","window","addEventListener","removeEventListener","handleConnect","state","handleDisconnect","handleError","console","disconnect","open","url","sendTransaction","transaction","connection","options","signTransaction","undefined","signAllTransactions","transactions","signMessage","message","Provider","value","select"],"sourceRoot":"","sources":["../../src/WalletProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}