{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URRegistryDecoder = void 0;\n\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\n\nconst __1 = require(\"..\");\n\nconst RegistryType_1 = require(\"../RegistryType\");\n\nconst errors_1 = require(\"../errors\");\n\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n  constructor() {\n    super(...arguments);\n\n    this.resultRegistryType = () => {\n      const ur = this.resultUR();\n\n      switch (ur.type) {\n        case RegistryType_1.RegistryTypes.BYTES.getType():\n          return __1.Bytes.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n          return __1.CryptoHDKey.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n          return __1.CryptoKeypath.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n          return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n          return __1.CryptoECKey.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n          return __1.CryptoOutput.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n          return __1.CryptoPSBT.fromCBOR(ur.cbor);\n\n        case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n          return __1.CryptoAccount.fromCBOR(ur.cbor);\n\n        default:\n          throw new errors_1.UnknownURTypeError(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n      }\n    };\n  }\n\n}\n\nexports.URRegistryDecoder = URRegistryDecoder;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;AAEA,MAAaA,iBAAb,SAAuCC,iBAAvC,CAAgD;EAAhDC;;;IACS,0BAAqB,MAAK;MAC/B,MAAMC,EAAE,GAAG,KAAKC,QAAL,EAAX;;MACA,QAAQD,EAAE,CAACE,IAAX;QACE,KAAKC,6BAAcC,KAAd,CAAoBC,OAApB,EAAL;UACE,OAAOC,UAAMC,QAAN,CAAeP,EAAE,CAACQ,IAAlB,CAAP;;QACF,KAAKL,6BAAcM,YAAd,CAA2BJ,OAA3B,EAAL;UACE,OAAOC,gBAAYC,QAAZ,CAAqBP,EAAE,CAACQ,IAAxB,CAAP;;QACF,KAAKL,6BAAcO,cAAd,CAA6BL,OAA7B,EAAL;UACE,OAAOC,kBAAcC,QAAd,CAAuBP,EAAE,CAACQ,IAA1B,CAAP;;QACF,KAAKL,6BAAcQ,gBAAd,CAA+BN,OAA/B,EAAL;UACE,OAAOC,mBAAeC,QAAf,CAAwBP,EAAE,CAACQ,IAA3B,CAAP;;QACF,KAAKL,6BAAcS,YAAd,CAA2BP,OAA3B,EAAL;UACE,OAAOC,gBAAYC,QAAZ,CAAqBP,EAAE,CAACQ,IAAxB,CAAP;;QACF,KAAKL,6BAAcU,aAAd,CAA4BR,OAA5B,EAAL;UACE,OAAOC,iBAAaC,QAAb,CAAsBP,EAAE,CAACQ,IAAzB,CAAP;;QACF,KAAKL,6BAAcW,WAAd,CAA0BT,OAA1B,EAAL;UACE,OAAOC,eAAWC,QAAX,CAAoBP,EAAE,CAACQ,IAAvB,CAAP;;QACF,KAAKL,6BAAcY,cAAd,CAA6BV,OAA7B,EAAL;UACE,OAAOC,kBAAcC,QAAd,CAAuBP,EAAE,CAACQ,IAA1B,CAAP;;QACF;UACE,MAAM,IAAIQ,2BAAJ,CACJ,iEAAiEhB,EAAE,CAACE,IAAI,uBADpE,CAAN;MAlBJ;IAsBD,CAxBM;EAyBR;;AA1B+C;;AAAhDe","names":["URRegistryDecoder","bc_ur_1","constructor","ur","resultUR","type","RegistryType_1","BYTES","getType","__1","fromCBOR","cbor","CRYPTO_HDKEY","CRYPTO_KEYPATH","CRYPTO_COIN_INFO","CRYPTO_ECKEY","CRYPTO_OUTPUT","CRYPTO_PSBT","CRYPTO_ACCOUNT","errors_1","exports"],"sourceRoot":"","sources":["../../src/Decoder/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}