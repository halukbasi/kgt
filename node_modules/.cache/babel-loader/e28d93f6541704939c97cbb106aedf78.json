{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoHDKey = void 0;\n\nconst bs58check_1 = require(\"bs58check\");\n\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\n\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\n\nconst lib_1 = require(\"./lib\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"is_master\"] = 1] = \"is_master\";\n  Keys[Keys[\"is_private\"] = 2] = \"is_private\";\n  Keys[Keys[\"key_data\"] = 3] = \"key_data\";\n  Keys[Keys[\"chain_code\"] = 4] = \"chain_code\";\n  Keys[Keys[\"use_info\"] = 5] = \"use_info\";\n  Keys[Keys[\"origin\"] = 6] = \"origin\";\n  Keys[Keys[\"children\"] = 7] = \"children\";\n  Keys[Keys[\"parent_fingerprint\"] = 8] = \"parent_fingerprint\";\n  Keys[Keys[\"name\"] = 9] = \"name\";\n  Keys[Keys[\"note\"] = 10] = \"note\";\n})(Keys || (Keys = {}));\n\nclass CryptoHDKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n\n    this.isECKey = () => {\n      return false;\n    };\n\n    this.getKey = () => this.key;\n\n    this.getChainCode = () => this.chainCode;\n\n    this.isMaster = () => this.master;\n\n    this.isPrivateKey = () => !!this.privateKey;\n\n    this.getUseInfo = () => this.useInfo;\n\n    this.getOrigin = () => this.origin;\n\n    this.getChildren = () => this.children;\n\n    this.getParentFingerprint = () => this.parentFingerprint;\n\n    this.getName = () => this.name;\n\n    this.getNote = () => this.note;\n\n    this.getBip32Key = () => {\n      var _a, _b, _c;\n\n      let version;\n      let depth;\n      let index = 0;\n      let parentFingerprint = Buffer.alloc(4).fill(0);\n\n      if (this.isMaster()) {\n        version = Buffer.from('0488ADE4', 'hex');\n        depth = 0;\n        index = 0;\n      } else {\n        depth = ((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getComponents().length) || ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getDepth());\n        const paths = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getComponents();\n        const lastPath = paths[paths.length - 1];\n\n        if (lastPath) {\n          index = lastPath.isHardened() ? lastPath.getIndex() + 0x80000000 : lastPath.getIndex();\n\n          if (this.getParentFingerprint()) {\n            parentFingerprint = this.getParentFingerprint();\n          }\n        }\n\n        if (this.isPrivateKey()) {\n          version = Buffer.from('0488ADE4', 'hex');\n        } else {\n          version = Buffer.from('0488B21E', 'hex');\n        }\n      }\n\n      const depthBuffer = Buffer.alloc(1);\n      depthBuffer.writeUInt8(depth, 0);\n      const indexBuffer = Buffer.alloc(4);\n      indexBuffer.writeUInt32BE(index, 0);\n      const chainCode = this.getChainCode();\n      const key = this.getKey();\n      return (0, bs58check_1.encode)(Buffer.concat([version, depthBuffer, parentFingerprint, indexBuffer, chainCode, key]));\n    };\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_HDKEY;\n    };\n\n    this.getOutputDescriptorContent = () => {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      let result = '';\n\n      if (this.getOrigin()) {\n        if (((_a = this.getOrigin()) === null || _a === void 0 ? void 0 : _a.getSourceFingerprint()) && ((_b = this.getOrigin()) === null || _b === void 0 ? void 0 : _b.getPath())) {\n          result += `${(_d = (_c = this.getOrigin()) === null || _c === void 0 ? void 0 : _c.getSourceFingerprint()) === null || _d === void 0 ? void 0 : _d.toString('hex')}/${(_e = this.getOrigin()) === null || _e === void 0 ? void 0 : _e.getPath()}`;\n        }\n      }\n\n      result += this.getBip32Key();\n\n      if (this.getChildren()) {\n        if ((_f = this.getChildren()) === null || _f === void 0 ? void 0 : _f.getPath()) {\n          result += `/${(_g = this.getChildren()) === null || _g === void 0 ? void 0 : _g.getPath()}`;\n        }\n      }\n\n      return result;\n    };\n\n    this.setupMasterKey = args => {\n      this.master = true;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n    };\n\n    this.setupDeriveKey = args => {\n      this.master = false;\n      this.privateKey = args.isPrivateKey;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n      this.useInfo = args.useInfo;\n      this.origin = args.origin;\n      this.children = args.children;\n      this.parentFingerprint = args.parentFingerprint;\n      this.name = args.name;\n      this.note = args.note;\n    };\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.master) {\n        map[Keys.is_master] = true;\n        map[Keys.key_data] = this.key;\n        map[Keys.chain_code] = this.chainCode;\n      } else {\n        if (this.privateKey !== undefined) {\n          map[Keys.is_private] = this.privateKey;\n        }\n\n        map[Keys.key_data] = this.key;\n\n        if (this.chainCode) {\n          map[Keys.chain_code] = this.chainCode;\n        }\n\n        if (this.useInfo) {\n          const useInfo = this.useInfo.toDataItem();\n          useInfo.setTag(this.useInfo.getRegistryType().getTag());\n          map[Keys.use_info] = useInfo;\n        }\n\n        if (this.origin) {\n          const origin = this.origin.toDataItem();\n          origin.setTag(this.origin.getRegistryType().getTag());\n          map[Keys.origin] = origin;\n        }\n\n        if (this.children) {\n          const children = this.children.toDataItem();\n          children.setTag(this.children.getRegistryType().getTag());\n          map[Keys.children] = children;\n        }\n\n        if (this.parentFingerprint) {\n          map[Keys.parent_fingerprint] = this.parentFingerprint.readUInt32BE(0);\n        }\n\n        if (this.name !== undefined) {\n          map[Keys.name] = this.name;\n        }\n\n        if (this.note !== undefined) {\n          map[Keys.note] = this.note;\n        }\n      }\n\n      return new lib_1.DataItem(map);\n    };\n\n    if (args.isMaster) {\n      this.setupMasterKey(args);\n    } else {\n      this.setupDeriveKey(args);\n    }\n  }\n\n}\n\nexports.CryptoHDKey = CryptoHDKey;\n\nCryptoHDKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const isMaster = !!map[Keys.is_master];\n  const isPrivateKey = map[Keys.is_private];\n  const key = map[Keys.key_data];\n  const chainCode = map[Keys.chain_code];\n  const useInfo = map[Keys.use_info] ? CryptoCoinInfo_1.CryptoCoinInfo.fromDataItem(map[Keys.use_info]) : undefined;\n  const origin = map[Keys.origin] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.origin]) : undefined;\n  const children = map[Keys.children] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.children]) : undefined;\n  const _parentFingerprint = map[Keys.parent_fingerprint];\n  let parentFingerprint = undefined;\n\n  if (_parentFingerprint) {\n    parentFingerprint = Buffer.alloc(4);\n    parentFingerprint.writeUInt32BE(_parentFingerprint, 0);\n  }\n\n  const name = map[Keys.name];\n  const note = map[Keys.note];\n  return new CryptoHDKey({\n    isMaster,\n    isPrivateKey,\n    key,\n    chainCode,\n    useInfo,\n    origin,\n    children,\n    parentFingerprint,\n    name,\n    note\n  });\n};\n\nCryptoHDKey.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoHDKey.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":"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","names":["Keys","CryptoHDKey","RegistryItem_1","constructor","args","key","chainCode","master","privateKey","useInfo","origin","children","parentFingerprint","name","note","version","depth","index","Buffer","alloc","fill","isMaster","from","getOrigin","_a","getComponents","length","_b","getDepth","paths","_c","lastPath","isHardened","getIndex","getParentFingerprint","isPrivateKey","depthBuffer","writeUInt8","indexBuffer","writeUInt32BE","getChainCode","getKey","concat","RegistryType_1","CRYPTO_HDKEY","result","getSourceFingerprint","getPath","_d","toString","_e","getBip32Key","getChildren","_f","_g","map","is_master","key_data","chain_code","undefined","is_private","toDataItem","setTag","getRegistryType","getTag","use_info","parent_fingerprint","readUInt32BE","lib_1","setupMasterKey","setupDeriveKey","exports","dataItem","getData","CryptoCoinInfo_1","fromDataItem","CryptoKeypath_1","_parentFingerprint","_cborPayload"],"sourceRoot":"","sources":["../src/CryptoHDKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}