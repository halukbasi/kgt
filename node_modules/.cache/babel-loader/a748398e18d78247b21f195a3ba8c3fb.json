{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoECKey = void 0;\n\nconst lib_1 = require(\"./lib\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"curve\"] = 1] = \"curve\";\n  Keys[Keys[\"private\"] = 2] = \"private\";\n  Keys[Keys[\"data\"] = 3] = \"data\";\n})(Keys || (Keys = {}));\n\nclass CryptoECKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n\n    this.isECKey = () => {\n      return true;\n    };\n\n    this.getCurve = () => this.curve || 0;\n\n    this.isPrivateKey = () => this.privateKey || false;\n\n    this.getData = () => this.data;\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_ECKEY;\n    };\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.curve) {\n        map[Keys.curve] = this.curve;\n      }\n\n      if (this.privateKey !== undefined) {\n        map[Keys.private] = this.privateKey;\n      }\n\n      map[Keys.data] = this.data;\n      return new lib_1.DataItem(map);\n    };\n\n    this.getOutputDescriptorContent = () => {\n      return this.data.toString('hex');\n    };\n\n    this.data = args.data;\n    this.curve = args.curve;\n    this.privateKey = args.privateKey || undefined;\n  }\n\n}\n\nexports.CryptoECKey = CryptoECKey;\n\nCryptoECKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const curve = map[Keys.curve];\n  const privateKey = map[Keys.private];\n  const data = map[Keys.data];\n\n  if (!data) {\n    throw new Error(`#[ur-registry][CryptoECKey][fn.fromDataItem]: decoded [dataItem][#data.data] is undefined: ${dataItem}`);\n  }\n\n  return new CryptoECKey({\n    data,\n    curve,\n    privateKey\n  });\n};\n\nCryptoECKey.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoECKey.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;EACPA;EACAA;EACAA;AACD,CAJD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AAMA,MAAaC,WAAb,SAAiCC,2BAAjC,CAA6C;EAI3CC,YAAYC,IAAZ,EAAwE;IACtE;;IAMF,eAAU,MAAK;MACb,OAAO,IAAP;IACD,CAFD;;IAIO,gBAAW,MAAM,KAAKC,KAAL,IAAc,CAA/B;;IACA,oBAAe,MAAM,KAAKC,UAAL,IAAmB,KAAxC;;IACA,eAAU,MAAM,KAAKC,IAArB;;IAEP,uBAAkB,MAAK;MACrB,OAAOC,6BAAcC,YAArB;IACD,CAFD;;IAIA,kBAAa,MAAK;MAChB,MAAMC,GAAG,GAAgB,EAAzB;;MACA,IAAI,KAAKL,KAAT,EAAgB;QACdK,GAAG,CAACV,IAAI,CAACK,KAAN,CAAH,GAAkB,KAAKA,KAAvB;MACD;;MACD,IAAI,KAAKC,UAAL,KAAoBK,SAAxB,EAAmC;QACjCD,GAAG,CAACV,IAAI,CAACY,OAAN,CAAH,GAAoB,KAAKN,UAAzB;MACD;;MACDI,GAAG,CAACV,IAAI,CAACO,IAAN,CAAH,GAAiB,KAAKA,IAAtB;MACA,OAAO,IAAIM,cAAJ,CAAaH,GAAb,CAAP;IACD,CAVD;;IAYA,kCAA6B,MAAK;MAChC,OAAO,KAAKH,IAAL,CAAUO,QAAV,CAAmB,KAAnB,CAAP;IACD,CAFD;;IA7BE,KAAKP,IAAL,GAAYH,IAAI,CAACG,IAAjB;IACA,KAAKF,KAAL,GAAaD,IAAI,CAACC,KAAlB;IACA,KAAKC,UAAL,GAAkBF,IAAI,CAACE,UAAL,IAAmBK,SAArC;EACD;;AAT0C;;AAA7CI;;AAuCSd,2BAAgBe,QAAD,IAAuB;EAC3C,MAAMN,GAAG,GAAGM,QAAQ,CAACC,OAAT,EAAZ;EACA,MAAMZ,KAAK,GAAGK,GAAG,CAACV,IAAI,CAACK,KAAN,CAAjB;EACA,MAAMC,UAAU,GAAGI,GAAG,CAACV,IAAI,CAACY,OAAN,CAAtB;EACA,MAAML,IAAI,GAAGG,GAAG,CAACV,IAAI,CAACO,IAAN,CAAhB;;EACA,IAAI,CAACA,IAAL,EAAW;IACT,MAAM,IAAIW,KAAJ,CACJ,8FAA8FF,QAAQ,EADlG,CAAN;EAGD;;EACD,OAAO,IAAIf,WAAJ,CAAgB;IAAEM,IAAF;IAAQF,KAAR;IAAeC;EAAf,CAAhB,CAAP;AACD,CAXM;;AAaOL,uBAAYkB,YAAD,IAAyB;EAChD,MAAMH,QAAQ,GAAG,4BAAiBG,YAAjB,CAAjB;EACA,OAAOlB,WAAW,CAACmB,YAAZ,CAAyBJ,QAAzB,CAAP;AACD,CAHa","names":["Keys","CryptoECKey","RegistryItem_1","constructor","args","curve","privateKey","data","RegistryType_1","CRYPTO_ECKEY","map","undefined","private","lib_1","toString","exports","dataItem","getData","Error","_cborPayload","fromDataItem"],"sourceRoot":"","sources":["../src/CryptoECKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}