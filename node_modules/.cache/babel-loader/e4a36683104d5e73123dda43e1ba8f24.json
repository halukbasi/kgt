{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoKeypath = void 0;\n\nconst lib_1 = require(\"./lib\");\n\nconst PathComponent_1 = require(\"./PathComponent\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"components\"] = 1] = \"components\";\n  Keys[Keys[\"source_fingerprint\"] = 2] = \"source_fingerprint\";\n  Keys[Keys[\"depth\"] = 3] = \"depth\";\n})(Keys || (Keys = {}));\n\nclass CryptoKeypath extends RegistryItem_1.RegistryItem {\n  constructor() {\n    let components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let sourceFingerprint = arguments.length > 1 ? arguments[1] : undefined;\n    let depth = arguments.length > 2 ? arguments[2] : undefined;\n    super();\n    this.components = components;\n    this.sourceFingerprint = sourceFingerprint;\n    this.depth = depth;\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_KEYPATH;\n    };\n\n    this.getPath = () => {\n      if (this.components.length === 0) {\n        return undefined;\n      }\n\n      const components = this.components.map(component => {\n        return `${component.isWildcard() ? '*' : component.getIndex()}${component.isHardened() ? \"'\" : ''}`;\n      });\n      return components.join('/');\n    };\n\n    this.getComponents = () => this.components;\n\n    this.getSourceFingerprint = () => this.sourceFingerprint;\n\n    this.getDepth = () => this.depth;\n\n    this.toDataItem = () => {\n      const map = {};\n      const components = [];\n      this.components && this.components.forEach(component => {\n        if (component.isWildcard()) {\n          components.push([]);\n        } else {\n          components.push(component.getIndex());\n        }\n\n        components.push(component.isHardened());\n      });\n      map[Keys.components] = components;\n\n      if (this.sourceFingerprint) {\n        map[Keys.source_fingerprint] = this.sourceFingerprint.readUInt32BE(0);\n      }\n\n      if (this.depth !== undefined) {\n        map[Keys.depth] = this.depth;\n      }\n\n      return new lib_1.DataItem(map);\n    };\n  }\n\n}\n\nexports.CryptoKeypath = CryptoKeypath;\n\nCryptoKeypath.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const pathComponents = [];\n  const components = map[Keys.components];\n\n  if (components) {\n    for (let i = 0; i < components.length; i += 2) {\n      const isHardened = components[i + 1];\n      const path = components[i];\n\n      if (typeof path === 'number') {\n        pathComponents.push(new PathComponent_1.PathComponent({\n          index: path,\n          hardened: isHardened\n        }));\n      } else {\n        pathComponents.push(new PathComponent_1.PathComponent({\n          hardened: isHardened\n        }));\n      }\n    }\n  }\n\n  const _sourceFingerprint = map[Keys.source_fingerprint];\n  let sourceFingerprint;\n\n  if (_sourceFingerprint) {\n    sourceFingerprint = Buffer.alloc(4);\n    sourceFingerprint.writeUInt32BE(_sourceFingerprint, 0);\n  }\n\n  const depth = map[Keys.depth];\n  return new CryptoKeypath(pathComponents, sourceFingerprint, depth);\n};\n\nCryptoKeypath.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoKeypath.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":"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","names":["Keys","CryptoKeypath","RegistryItem_1","constructor","components","sourceFingerprint","depth","RegistryType_1","CRYPTO_KEYPATH","length","undefined","map","component","isWildcard","getIndex","isHardened","join","forEach","push","source_fingerprint","readUInt32BE","lib_1","exports","dataItem","getData","pathComponents","i","path","PathComponent_1","index","hardened","_sourceFingerprint","Buffer","alloc","writeUInt32BE","_cborPayload","fromDataItem"],"sourceRoot":"","sources":["../src/CryptoKeypath.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}