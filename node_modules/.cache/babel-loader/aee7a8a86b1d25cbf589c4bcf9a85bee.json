{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoMultiAccounts = void 0;\n\nconst RegistryType_1 = require(\"../RegistryType\");\n\nconst CryptoHDKey_1 = require(\"../CryptoHDKey\");\n\nconst RegistryItem_1 = require(\"../RegistryItem\");\n\nconst lib_1 = require(\"../lib\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n  Keys[Keys[\"device\"] = 3] = \"device\";\n})(Keys || (Keys = {}));\n\nclass CryptoMultiAccounts extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, keys, device) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.keys = keys;\n    this.device = device;\n\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n\n    this.getMasterFingerprint = () => this.masterFingerprint;\n\n    this.getKeys = () => this.keys;\n\n    this.getDevice = () => this.device;\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n\n      if (this.keys) {\n        map[Keys.keys] = this.keys.map(item => {\n          const dataItem = item.toDataItem();\n          dataItem.setTag(item.getRegistryType().getTag());\n          return dataItem;\n        });\n      }\n\n      if (this.device) {\n        map[Keys.device] = this.device;\n      }\n\n      return new lib_1.DataItem(map);\n    };\n  }\n\n}\n\nexports.CryptoMultiAccounts = CryptoMultiAccounts;\n\nCryptoMultiAccounts.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n\n  const keys = map[Keys.keys];\n  const cryptoHDKeys = keys.map(item => CryptoHDKey_1.CryptoHDKey.fromDataItem(item));\n  const device = map[Keys.device];\n  return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device);\n};\n\nCryptoMultiAccounts.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoMultiAccounts.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;EACPA;EACAA;EACAA;AACD,CAJD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AAMA,MAAaC,mBAAb,SAAyCC,2BAAzC,CAAqD;EAGnDC,YACUC,iBADV,EAEUC,IAFV,EAGUC,MAHV,EAGyB;IAEvB;IAJQ;IACA;IACA;;IALV,uBAAkB,MAAMC,6BAAcC,qBAAtC;;IAUO,4BAAuB,MAAM,KAAKJ,iBAAlC;;IACA,eAAU,MAAM,KAAKC,IAArB;;IACA,iBAAY,MAAM,KAAKC,MAAvB;;IAEA,kBAAa,MAAe;MACjC,MAAMG,GAAG,GAAgB,EAAzB;;MACA,IAAI,KAAKL,iBAAT,EAA4B;QAC1BK,GAAG,CAACT,IAAI,CAACI,iBAAN,CAAH,GAA8B,KAAKA,iBAAL,CAAuBM,YAAvB,CAAoC,CAApC,CAA9B;MACD;;MACD,IAAI,KAAKL,IAAT,EAAe;QACbI,GAAG,CAACT,IAAI,CAACK,IAAN,CAAH,GAAiB,KAAKA,IAAL,CAAUI,GAAV,CAAeE,IAAD,IAAS;UACtC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAL,EAAjB;UACAD,QAAQ,CAACE,MAAT,CAAgBH,IAAI,CAACI,eAAL,GAAuBC,MAAvB,EAAhB;UACA,OAAOJ,QAAP;QACD,CAJgB,CAAjB;MAKD;;MACD,IAAI,KAAKN,MAAT,EAAiB;QACfG,GAAG,CAACT,IAAI,CAACM,MAAN,CAAH,GAAmB,KAAKA,MAAxB;MACD;;MACD,OAAO,IAAIW,cAAJ,CAAaR,GAAb,CAAP;IACD,CAhBM;EANN;;AATkD;;AAArDS;;AAiCgBjB,mCAAgBW,QAAD,IAAuB;EAClD,MAAMH,GAAG,GAAGG,QAAQ,CAACO,OAAT,EAAZ;EACA,MAAMf,iBAAiB,GAAGgB,MAAM,CAACC,KAAP,CAAa,CAAb,CAA1B;EACA,MAAMC,kBAAkB,GAAGb,GAAG,CAACT,IAAI,CAACI,iBAAN,CAA9B;;EACA,IAAIkB,kBAAJ,EAAwB;IACtBlB,iBAAiB,CAACmB,aAAlB,CAAgCD,kBAAhC,EAAoD,CAApD;EACD;;EACD,MAAMjB,IAAI,GAAGI,GAAG,CAACT,IAAI,CAACK,IAAN,CAAhB;EACA,MAAMmB,YAAY,GAAGnB,IAAI,CAACI,GAAL,CAAUE,IAAD,IAAUc,0BAAYC,YAAZ,CAAyBf,IAAzB,CAAnB,CAArB;EACA,MAAML,MAAM,GAAGG,GAAG,CAACT,IAAI,CAACM,MAAN,CAAlB;EACA,OAAO,IAAIL,mBAAJ,CAAwBG,iBAAxB,EAA2CoB,YAA3C,EAAyDlB,MAAzD,CAAP;AACD,CAXa;;AAaAL,+BAAY0B,YAAD,IAAyB;EAChD,MAAMf,QAAQ,GAAG,4BAAiBe,YAAjB,CAAjB;EACA,OAAO1B,mBAAmB,CAACyB,YAApB,CAAiCd,QAAjC,CAAP;AACD,CAHa","names":["Keys","CryptoMultiAccounts","RegistryItem_1","constructor","masterFingerprint","keys","device","RegistryType_1","CRYPTO_MULTI_ACCOUNTS","map","readUInt32BE","item","dataItem","toDataItem","setTag","getRegistryType","getTag","lib_1","exports","getData","Buffer","alloc","_masterFingerprint","writeUInt32BE","cryptoHDKeys","CryptoHDKey_1","fromDataItem","_cborPayload"],"sourceRoot":"","sources":["../../src/extended/CryptoMultiAccounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}