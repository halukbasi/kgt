{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extend = exports.PathComponent = exports.ScriptExpressions = exports.MultiKey = exports.CryptoPSBT = exports.CryptoOutput = exports.CryptoECKey = exports.CryptoCoinInfoNetwork = exports.CryptoCoinInfoType = exports.CryptoCoinInfo = exports.CryptoKeypath = exports.CryptoMultiAccounts = exports.CryptoHDKey = exports.CryptoAccount = exports.Bytes = exports.URRegistryDecoder = exports.DataItem = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nrequire(\"./patchCBOR\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nObject.defineProperty(exports, \"CryptoHDKey\", {\n  enumerable: true,\n  get: function () {\n    return CryptoHDKey_1.CryptoHDKey;\n  }\n});\n\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\n\nObject.defineProperty(exports, \"CryptoKeypath\", {\n  enumerable: true,\n  get: function () {\n    return CryptoKeypath_1.CryptoKeypath;\n  }\n});\n\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\n\nObject.defineProperty(exports, \"CryptoCoinInfo\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.CryptoCoinInfo;\n  }\n});\nObject.defineProperty(exports, \"CryptoCoinInfoType\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.Type;\n  }\n});\nObject.defineProperty(exports, \"CryptoCoinInfoNetwork\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.Network;\n  }\n});\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nObject.defineProperty(exports, \"CryptoECKey\", {\n  enumerable: true,\n  get: function () {\n    return CryptoECKey_1.CryptoECKey;\n  }\n});\n\nconst Bytes_1 = require(\"./Bytes\");\n\nObject.defineProperty(exports, \"Bytes\", {\n  enumerable: true,\n  get: function () {\n    return Bytes_1.Bytes;\n  }\n});\n\nconst CryptoOutput_1 = require(\"./CryptoOutput\");\n\nObject.defineProperty(exports, \"CryptoOutput\", {\n  enumerable: true,\n  get: function () {\n    return CryptoOutput_1.CryptoOutput;\n  }\n});\n\nconst CryptoPSBT_1 = require(\"./CryptoPSBT\");\n\nObject.defineProperty(exports, \"CryptoPSBT\", {\n  enumerable: true,\n  get: function () {\n    return CryptoPSBT_1.CryptoPSBT;\n  }\n});\n\nconst CryptoAccount_1 = require(\"./CryptoAccount\");\n\nObject.defineProperty(exports, \"CryptoAccount\", {\n  enumerable: true,\n  get: function () {\n    return CryptoAccount_1.CryptoAccount;\n  }\n});\n\nconst Decoder_1 = require(\"./Decoder\");\n\nObject.defineProperty(exports, \"URRegistryDecoder\", {\n  enumerable: true,\n  get: function () {\n    return Decoder_1.URRegistryDecoder;\n  }\n});\n\nconst MultiKey_1 = require(\"./MultiKey\");\n\nObject.defineProperty(exports, \"MultiKey\", {\n  enumerable: true,\n  get: function () {\n    return MultiKey_1.MultiKey;\n  }\n});\n\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\n\nObject.defineProperty(exports, \"ScriptExpressions\", {\n  enumerable: true,\n  get: function () {\n    return ScriptExpression_1.ScriptExpressions;\n  }\n});\n\nconst PathComponent_1 = require(\"./PathComponent\");\n\nObject.defineProperty(exports, \"PathComponent\", {\n  enumerable: true,\n  get: function () {\n    return PathComponent_1.PathComponent;\n  }\n});\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nconst lib_1 = require(\"./lib\");\n\nvar lib_2 = require(\"./lib\");\n\nObject.defineProperty(exports, \"DataItem\", {\n  enumerable: true,\n  get: function () {\n    return lib_2.DataItem;\n  }\n});\n\nconst utils_1 = require(\"./utils\");\n\nconst CryptoMultiAccounts_1 = require(\"./extended/CryptoMultiAccounts\");\n\nObject.defineProperty(exports, \"CryptoMultiAccounts\", {\n  enumerable: true,\n  get: function () {\n    return CryptoMultiAccounts_1.CryptoMultiAccounts;\n  }\n});\nconst URlib = {\n  URRegistryDecoder: Decoder_1.URRegistryDecoder,\n  Bytes: Bytes_1.Bytes,\n  CryptoAccount: CryptoAccount_1.CryptoAccount,\n  CryptoHDKey: CryptoHDKey_1.CryptoHDKey,\n  CryptoMultiAccounts: CryptoMultiAccounts_1.CryptoMultiAccounts,\n  CryptoKeypath: CryptoKeypath_1.CryptoKeypath,\n  CryptoCoinInfo: CryptoCoinInfo_1.CryptoCoinInfo,\n  CryptoCoinInfoType: CryptoCoinInfo_1.Type,\n  CryptoCoinInfoNetwork: CryptoCoinInfo_1.Network,\n  CryptoECKey: CryptoECKey_1.CryptoECKey,\n  CryptoOutput: CryptoOutput_1.CryptoOutput,\n  CryptoPSBT: CryptoPSBT_1.CryptoPSBT,\n  MultiKey: MultiKey_1.MultiKey,\n  ScriptExpressions: ScriptExpression_1.ScriptExpressions,\n  PathComponent: PathComponent_1.PathComponent\n};\nconst cbor = {\n  addReader: lib_1.addReader,\n  addSemanticDecode: lib_1.addSemanticDecode,\n  addSemanticEncode: lib_1.addSemanticEncode,\n  addWriter: lib_1.addWriter,\n  patchTags: utils_1.patchTags\n};\nconst extend = {\n  RegistryTypes: RegistryType_1.RegistryTypes,\n  RegistryItem: RegistryItem_1.RegistryItem,\n  RegistryType: RegistryType_1.RegistryType,\n  decodeToDataItem: lib_1.decodeToDataItem,\n  encodeDataItem: lib_1.encodeDataItem,\n  cbor\n};\nexports.extend = extend;\n(0, tslib_1.__exportStar)(require(\"./errors\"), exports);\n(0, tslib_1.__exportStar)(require(\"./Decoder\"), exports);\n(0, tslib_1.__exportStar)(require(\"./lib\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoAccount\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoPSBT\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoHDKey\"), exports);\n(0, tslib_1.__exportStar)(require(\"./extended/CryptoMultiAccounts\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoOutput\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoCoinInfo\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoECKey\"), exports);\n(0, tslib_1.__exportStar)(require(\"./MultiKey\"), exports);\n(0, tslib_1.__exportStar)(require(\"./CryptoKeypath\"), exports);\n(0, tslib_1.__exportStar)(require(\"./patchCBOR\"), exports);\n(0, tslib_1.__exportStar)(require(\"./PathComponent\"), exports);\n(0, tslib_1.__exportStar)(require(\"./RegistryItem\"), exports);\n(0, tslib_1.__exportStar)(require(\"./RegistryType\"), exports);\n(0, tslib_1.__exportStar)(require(\"./types\"), exports);\n(0, tslib_1.__exportStar)(require(\"./utils\"), exports);\nexports.default = URlib;","map":{"version":3,"mappings":";;;;;;;;;AAAAA;;AAEA;;AA6EEC;EAAAC;EAAAC;IAAA,OA7EOC,yBA6EP;EA7EkB;AA6ElB;;AA5EF;;AA8EEH;EAAAC;EAAAC;IAAA,OA9EOE,6BA8EP;EA9EoB;AA8EpB;;AA7EF;;AA8EEJ;EAAAC;EAAAC;IAAA,OA7EAG,+BA6EA;EA7Ec;AA6Ed;AACAL;EAAAC;EAAAC;IAAA,OA7EQG,qBA6ER;EA7E0B;AA6E1B;AACAL;EAAAC;EAAAC;IAAA,OA7EWG,wBA6EX;EA7EgC;AA6EhC;;AA3EF;;AA4EEL;EAAAC;EAAAC;IAAA,OA5EOI,yBA4EP;EA5EkB;AA4ElB;;AA3EF;;AAmEEN;EAAAC;EAAAC;IAAA,OAnEOK,aAmEP;EAnEY;AAmEZ;;AAlEF;;AA2EEP;EAAAC;EAAAC;IAAA,OA3EOM,2BA2EP;EA3EmB;AA2EnB;;AA1EF;;AA2EER;EAAAC;EAAAC;IAAA,OA3EOO,uBA2EP;EA3EiB;AA2EjB;;AA1EF;;AAiEET;EAAAC;EAAAC;IAAA,OAjEOQ,6BAiEP;EAjEoB;AAiEpB;;AAhEF;;AA8DEV;EAAAC;EAAAC;IAAA,OA9DOS,2BA8DP;EA9DwB;AA8DxB;;AA5DF;;AAwEEX;EAAAC;EAAAC;IAAA,OAxEOU,mBAwEP;EAxEe;AAwEf;;AAtEF;;AAuEEZ;EAAAC;EAAAC;IAAA,OAvEOW,oCAuEP;EAvEwB;AAuExB;;AAtEF;;AAuEEb;EAAAC;EAAAC;IAAA,OAvEOY,6BAuEP;EAvEoB;AAuEpB;;AArEF;;AACA;;AAEA;;AASA;;AAASd;EAAAC;EAAAC;IAAA;EAAQ;AAAR;;AAET;;AACA;;AA4CEF;EAAAC;EAAAC;IAAA,OA5CMa,yCA4CN;EA5CyB;AA4CzB;AA1CF,MAAMC,KAAK,GAAG;EACZC,iBAAiB,EAAjBN,2BADY;EAEZO,KAAK,EAALX,aAFY;EAGZY,aAAa,EAAbT,6BAHY;EAIZU,WAAW,EAAXjB,yBAJY;EAKZkB,mBAAmB,EAAnBN,yCALY;EAMZO,aAAa,EAAblB,6BANY;EAOZmB,cAAc,EAAdlB,+BAPY;EAQZmB,kBAAkB,EAAlBnB,qBARY;EASZoB,qBAAqB,EAArBpB,wBATY;EAUZqB,WAAW,EAAXpB,yBAVY;EAWZqB,YAAY,EAAZnB,2BAXY;EAYZoB,UAAU,EAAVnB,uBAZY;EAaZoB,QAAQ,EAARjB,mBAbY;EAcZkB,iBAAiB,EAAjBjB,oCAdY;EAeZkB,aAAa,EAAbjB;AAfY,CAAd;AAkBA,MAAMkB,IAAI,GAAG;EACXC,SAAS,EAATC,eADW;EAEXC,iBAAiB,EAAjBD,uBAFW;EAGXE,iBAAiB,EAAjBF,uBAHW;EAIXG,SAAS,EAATH,eAJW;EAKXI,SAAS,EAATC;AALW,CAAb;AAQA,MAAMC,MAAM,GAAG;EACbC,aAAa,EAAbC,4BADa;EAEbC,YAAY,EAAZC,2BAFa;EAGbC,YAAY,EAAZH,2BAHa;EAKbI,gBAAgB,EAAhBZ,sBALa;EAMba,cAAc,EAAdb,oBANa;EAQbF;AARa,CAAf;AA2BEgB;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,kBAAehC,KAAf","names":["require","Object","enumerable","get","CryptoHDKey_1","CryptoKeypath_1","CryptoCoinInfo_1","CryptoECKey_1","Bytes_1","CryptoOutput_1","CryptoPSBT_1","CryptoAccount_1","Decoder_1","MultiKey_1","ScriptExpression_1","PathComponent_1","CryptoMultiAccounts_1","URlib","URRegistryDecoder","Bytes","CryptoAccount","CryptoHDKey","CryptoMultiAccounts","CryptoKeypath","CryptoCoinInfo","CryptoCoinInfoType","CryptoCoinInfoNetwork","CryptoECKey","CryptoOutput","CryptoPSBT","MultiKey","ScriptExpressions","PathComponent","cbor","addReader","lib_1","addSemanticDecode","addSemanticEncode","addWriter","patchTags","utils_1","extend","RegistryTypes","RegistryType_1","RegistryItem","RegistryItem_1","RegistryType","decodeToDataItem","encodeDataItem","exports"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}