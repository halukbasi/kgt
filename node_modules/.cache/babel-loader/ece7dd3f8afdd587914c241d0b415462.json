{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { WalletNotConnectedError } from './errors.mjs';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\n\nexport var WalletReadyState;\n\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\n\nexport class BaseWalletAdapter extends EventEmitter {\n  get connected() {\n    return !!this.publicKey;\n  }\n\n  async prepareTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const publicKey = this.publicKey;\n    if (!publicKey) throw new WalletNotConnectedError();\n    transaction.feePayer = transaction.feePayer || publicKey;\n    transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getLatestBlockhash(options === null || options === void 0 ? void 0 : options.preflightCommitment)).blockhash;\n    return transaction;\n  }\n\n}\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n  const disposers = [];\n\n  function detectAndDispose() {\n    const detected = detect();\n\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  } // Strategy #1: Try detecting every second.\n\n\n  const interval = // TODO: #334 Replace with idle callback strategy.\n  setInterval(detectAndDispose, 1000);\n  disposers.push(() => clearInterval(interval)); // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n\n  if ( // Implies that `DOMContentLoaded` has not yet fired.\n  document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n  } // Strategy #3: Detect after the `window` has fully loaded.\n\n\n  if ( // If the `complete` state has been reached, we're too late.\n  document.readyState !== 'complete') {\n    window.addEventListener('load', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => window.removeEventListener('load', detectAndDispose));\n  } // Strategy #4: Detect synchronously, now.\n\n\n  detectAndDispose();\n}","map":{"version":3,"mappings":"AACA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,SAASC,uBAAT,QAAwC,cAAxC;AAEA,SAASD,YAAT;AAqCA;;;;;;;;;;AASA,WAAYE,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;EACxB;;;;;EAKAA;EACAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;AACH,CAlBD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;;AAoBA,OAAM,MAAgBC,iBAAhB,SAA0CH,YAA1C,CAA2E;EAQhE,IAATI,SAAS;IACT,OAAO,CAAC,CAAC,KAAKC,SAAd;EACH;;EAUiC,MAAlBC,kBAAkB,CAC9BC,WAD8B,EAE9BC,UAF8B,EAGL;IAAA,IAAzBC,OAAyB,uEAAF,EAAE;IAEzB,MAAMJ,SAAS,GAAG,KAAKA,SAAvB;IACA,IAAI,CAACA,SAAL,EAAgB,MAAM,IAAIJ,uBAAJ,EAAN;IAEhBM,WAAW,CAACG,QAAZ,GAAuBH,WAAW,CAACG,QAAZ,IAAwBL,SAA/C;IACAE,WAAW,CAACI,eAAZ,GACIJ,WAAW,CAACI,eAAZ,IACA,CAAC,MAAMH,UAAU,CAACI,kBAAX,CAA8BH,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEI,mBAAvC,CAAP,EAAoEC,SAFxE;IAIA,OAAOP,WAAP;EACH;;AAlC4E;AAqCjF,OAAM,SAAUQ,6BAAV,CAAwCC,MAAxC,EAA6D;EAC/D;EACA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAAzD,EAAsE;EAEtE,MAAMC,SAAS,GAAmB,EAAlC;;EAEA,SAASC,gBAAT,GAAyB;IACrB,MAAMC,QAAQ,GAAGL,MAAM,EAAvB;;IACA,IAAIK,QAAJ,EAAc;MACV,KAAK,MAAMC,OAAX,IAAsBH,SAAtB,EAAiC;QAC7BG,OAAO;MACV;IACJ;EACJ,CAb8D,CAe/D;;;EACA,MAAMC,QAAQ,GACV;EACAC,WAAW,CAACJ,gBAAD,EAAmB,IAAnB,CAFf;EAGAD,SAAS,CAACM,IAAV,CAAe,MAAMC,aAAa,CAACH,QAAD,CAAlC,EAnB+D,CAqB/D;;EACA,KACI;EACAL,QAAQ,CAACS,UAAT,KAAwB,SAF5B,EAGE;IACET,QAAQ,CAACU,gBAAT,CAA0B,kBAA1B,EAA8CR,gBAA9C,EAAgE;MAAES,IAAI,EAAE;IAAR,CAAhE;IACAV,SAAS,CAACM,IAAV,CAAe,MAAMP,QAAQ,CAACY,mBAAT,CAA6B,kBAA7B,EAAiDV,gBAAjD,CAArB;EACH,CA5B8D,CA8B/D;;;EACA,KACI;EACAF,QAAQ,CAACS,UAAT,KAAwB,UAF5B,EAGE;IACEV,MAAM,CAACW,gBAAP,CAAwB,MAAxB,EAAgCR,gBAAhC,EAAkD;MAAES,IAAI,EAAE;IAAR,CAAlD;IACAV,SAAS,CAACM,IAAV,CAAe,MAAMR,MAAM,CAACa,mBAAP,CAA2B,MAA3B,EAAmCV,gBAAnC,CAArB;EACH,CArC8D,CAuC/D;;;EACAA,gBAAgB;AACnB","names":["EventEmitter","WalletNotConnectedError","WalletReadyState","BaseWalletAdapter","connected","publicKey","prepareTransaction","transaction","connection","options","feePayer","recentBlockhash","getLatestBlockhash","preflightCommitment","blockhash","scopePollingDetectionStrategy","detect","window","document","disposers","detectAndDispose","detected","dispose","interval","setInterval","push","clearInterval","readyState","addEventListener","once","removeEventListener"],"sourceRoot":"","sources":["../../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}