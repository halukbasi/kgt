{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiKey = void 0;\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nconst DataItem_1 = require(\"./lib/DataItem\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"threshold\"] = 1] = \"threshold\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n})(Keys || (Keys = {}));\n\nclass MultiKey extends RegistryItem_1.RegistryItem {\n  constructor(threshold, keys) {\n    super();\n    this.threshold = threshold;\n    this.keys = keys;\n\n    this.getThreshold = () => this.threshold;\n\n    this.getKeys = () => this.keys;\n\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys.threshold] = this.threshold;\n      const keys = this.keys.map(k => {\n        const dataItem = k.toDataItem();\n        dataItem.setTag(k.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.keys] = keys;\n      return new DataItem_1.DataItem(map);\n    };\n\n    this.getOutputDescriptorContent = () => {\n      return [this.getThreshold(), this.keys.map(k => k.getOutputDescriptorContent()).join(',')].join(',');\n    };\n  }\n\n}\n\nexports.MultiKey = MultiKey;\n\nMultiKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const threshold = map[Keys.threshold];\n  const _keys = map[Keys.keys];\n  const keys = [];\n\n  _keys.forEach(k => {\n    if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      keys.push(CryptoHDKey_1.CryptoHDKey.fromDataItem(k));\n    } else if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getTag()) {\n      keys.push(CryptoECKey_1.CryptoECKey.fromDataItem(k));\n    }\n  });\n\n  return new MultiKey(threshold, keys);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;EACPA;EACAA;AACD,CAHD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AAKA,MAAaC,QAAb,SAA8BC,2BAA9B,CAA0C;EAKxCC,YACUC,SADV,EAEUC,IAFV,EAE6C;IAE3C;IAHQ;IACA;;IAKV,oBAAe,MAAM,KAAKD,SAA1B;;IACA,eAAU,MAAM,KAAKC,IAArB;;IAEA,kBAAa,MAAK;MAChB,MAAMC,GAAG,GAAgB,EAAzB;MACAA,GAAG,CAACN,IAAI,CAACI,SAAN,CAAH,GAAsB,KAAKA,SAA3B;MACA,MAAMC,IAAI,GAAe,KAAKA,IAAL,CAAUC,GAAV,CAAeC,CAAD,IAAM;QAC3C,MAAMC,QAAQ,GAAGD,CAAC,CAACE,UAAF,EAAjB;QACAD,QAAQ,CAACE,MAAT,CAAgBH,CAAC,CAACI,eAAF,GAAoBC,MAApB,EAAhB;QACA,OAAOJ,QAAP;MACD,CAJwB,CAAzB;MAKAF,GAAG,CAACN,IAAI,CAACK,IAAN,CAAH,GAAiBA,IAAjB;MACA,OAAO,IAAIQ,mBAAJ,CAAaP,GAAb,CAAP;IACD,CAVD;;IAYA,kCAA6B,MAAK;MAChC,OAAO,CAAC,KAAKQ,YAAL,EAAD,EACL,KAAKT,IAAL,CAAUC,GAAV,CAAcC,CAAC,IAAIA,CAAC,CAACQ,0BAAF,EAAnB,EAAmDC,IAAnD,CAAwD,GAAxD,CADK,EAELA,IAFK,CAEA,GAFA,CAAP;IAGD,CAJD;EAjBC;;AAVuC;;AAA1CC;;AAiCShB,wBAAgBO,QAAD,IAAuB;EAC3C,MAAMF,GAAG,GAAGE,QAAQ,CAACU,OAAT,EAAZ;EACA,MAAMd,SAAS,GAAGE,GAAG,CAACN,IAAI,CAACI,SAAN,CAArB;EACA,MAAMe,KAAK,GAAGb,GAAG,CAACN,IAAI,CAACK,IAAN,CAAjB;EACA,MAAMA,IAAI,GAAkC,EAA5C;;EACAc,KAAK,CAACC,OAAN,CAAeb,CAAD,IAAM;IAClB,IAAIA,CAAC,CAACK,MAAF,OAAeS,6BAAcC,YAAd,CAA2BV,MAA3B,EAAnB,EAAwD;MACtDP,IAAI,CAACkB,IAAL,CAAUC,0BAAYC,YAAZ,CAAyBlB,CAAzB,CAAV;IACD,CAFD,MAEO,IAAIA,CAAC,CAACK,MAAF,OAAeS,6BAAcK,YAAd,CAA2Bd,MAA3B,EAAnB,EAAwD;MAC7DP,IAAI,CAACkB,IAAL,CAAUI,0BAAYF,YAAZ,CAAyBlB,CAAzB,CAAV;IACD;EACF,CAND;;EAOA,OAAO,IAAIN,QAAJ,CAAaG,SAAb,EAAwBC,IAAxB,CAAP;AACD,CAbM","names":["Keys","MultiKey","RegistryItem_1","constructor","threshold","keys","map","k","dataItem","toDataItem","setTag","getRegistryType","getTag","DataItem_1","getThreshold","getOutputDescriptorContent","join","exports","getData","_keys","forEach","RegistryType_1","CRYPTO_HDKEY","push","CryptoHDKey_1","fromDataItem","CRYPTO_ECKEY","CryptoECKey_1"],"sourceRoot":"","sources":["../src/MultiKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}